{"version":3,"file":"ID3v2Parser-CXZlreWP.js","sources":["../../node_modules/music-metadata/lib/id3v2/FrameParser.js","../../node_modules/music-metadata/lib/id3v2/ID3v2Parser.js"],"sourcesContent":["import initDebug from 'debug';\nimport * as Token from 'token-types';\nimport * as util from '../common/Util.js';\nimport { AttachedPictureType, SyncTextHeader, TextEncodingToken, TextHeader } from './ID3v2Token.js';\nimport { Genres } from '../id3v1/ID3v1Parser.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nimport { decodeUintBE } from '../common/Util.js';\nconst debug = initDebug('music-metadata:id3v2:frame-parser');\nconst defaultEnc = 'latin1'; // latin1 == iso-8859-1;\nexport function parseGenre(origVal) {\n    // match everything inside parentheses\n    const genres = [];\n    let code;\n    let word = '';\n    for (const c of origVal) {\n        if (typeof code === 'string') {\n            if (c === '(' && code === '') {\n                word += '(';\n                code = undefined;\n            }\n            else if (c === ')') {\n                if (word !== '') {\n                    genres.push(word);\n                    word = '';\n                }\n                const genre = parseGenreCode(code);\n                if (genre) {\n                    genres.push(genre);\n                }\n                code = undefined;\n            }\n            else\n                code += c;\n        }\n        else if (c === '(') {\n            code = '';\n        }\n        else {\n            word += c;\n        }\n    }\n    if (word) {\n        if (genres.length === 0 && word.match(/^\\d*$/)) {\n            word = parseGenreCode(word);\n        }\n        if (word) {\n            genres.push(word);\n        }\n    }\n    return genres;\n}\nfunction parseGenreCode(code) {\n    if (code === 'RX')\n        return 'Remix';\n    if (code === 'CR')\n        return 'Cover';\n    if (code.match(/^\\d*$/)) {\n        return Genres[Number.parseInt(code)];\n    }\n}\nexport class FrameParser {\n    /**\n     * Create id3v2 frame parser\n     * @param major - Major version, e.g. (4) for  id3v2.4\n     * @param warningCollector - Used to collect decode issue\n     */\n    constructor(major, warningCollector) {\n        this.major = major;\n        this.warningCollector = warningCollector;\n    }\n    readData(uint8Array, type, includeCovers) {\n        if (uint8Array.length === 0) {\n            this.warningCollector.addWarning(`id3v2.${this.major} header has empty tag type=${type}`);\n            return;\n        }\n        const { encoding, bom } = TextEncodingToken.get(uint8Array, 0);\n        const length = uint8Array.length;\n        let offset = 0;\n        let output = []; // ToDo\n        const nullTerminatorLength = FrameParser.getNullTerminatorLength(encoding);\n        let fzero;\n        debug(`Parsing tag type=${type}, encoding=${encoding}, bom=${bom}`);\n        switch (type !== 'TXXX' && type[0] === 'T' ? 'T*' : type) {\n            case 'T*': // 4.2.1. Text information frames - details\n            case 'GRP1': // iTunes-specific ID3v2 grouping field\n            case 'IPLS': // v2.3: Involved people list\n            case 'MVIN':\n            case 'MVNM':\n            case 'PCS':\n            case 'PCST': {\n                let text;\n                try {\n                    text = util.decodeString(uint8Array.subarray(1), encoding).replace(/\\x00+$/, '');\n                }\n                catch (error) {\n                    if (error instanceof Error) {\n                        this.warningCollector.addWarning(`id3v2.${this.major} type=${type} header has invalid string value: ${error.message}`);\n                        break;\n                    }\n                    throw error;\n                }\n                switch (type) {\n                    case 'TMCL': // Musician credits list\n                    case 'TIPL': // Involved people list\n                    case 'IPLS': // Involved people list\n                        output = FrameParser.functionList(this.splitValue(type, text));\n                        break;\n                    case 'TRK':\n                    case 'TRCK':\n                    case 'TPOS':\n                        output = text;\n                        break;\n                    case 'TCOM':\n                    case 'TEXT':\n                    case 'TOLY':\n                    case 'TOPE':\n                    case 'TPE1':\n                    case 'TSRC':\n                        // id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\n                        output = this.splitValue(type, text);\n                        break;\n                    case 'TCO':\n                    case 'TCON':\n                        output = this.splitValue(type, text).map(v => parseGenre(v)).reduce((acc, val) => acc.concat(val), []);\n                        break;\n                    case 'PCS':\n                    case 'PCST':\n                        // TODO: Why `default` not results `1` but `''`?\n                        output = this.major >= 4 ? this.splitValue(type, text) : [text];\n                        output = (Array.isArray(output) && output[0] === '') ? 1 : 0;\n                        break;\n                    default:\n                        output = this.major >= 4 ? this.splitValue(type, text) : [text];\n                }\n                break;\n            }\n            case 'TXXX': {\n                const idAndData = FrameParser.readIdentifierAndData(uint8Array, offset + 1, length, encoding);\n                const textTag = {\n                    description: idAndData.id,\n                    text: this.splitValue(type, util.decodeString(idAndData.data, encoding).replace(/\\x00+$/, ''))\n                };\n                output = textTag;\n                break;\n            }\n            case 'PIC':\n            case 'APIC':\n                if (includeCovers) {\n                    const pic = {};\n                    offset += 1;\n                    switch (this.major) {\n                        case 2:\n                            pic.format = util.decodeString(uint8Array.subarray(offset, offset + 3), 'latin1'); // 'latin1'; // latin1 == iso-8859-1;\n                            offset += 3;\n                            break;\n                        case 3:\n                        case 4:\n                            fzero = util.findZero(uint8Array, offset, length, defaultEnc);\n                            pic.format = util.decodeString(uint8Array.subarray(offset, fzero), defaultEnc);\n                            offset = fzero + 1;\n                            break;\n                        default:\n                            throw makeUnexpectedMajorVersionError(this.major);\n                    }\n                    pic.format = FrameParser.fixPictureMimeType(pic.format);\n                    pic.type = AttachedPictureType[uint8Array[offset]];\n                    offset += 1;\n                    fzero = util.findZero(uint8Array, offset, length, encoding);\n                    pic.description = util.decodeString(uint8Array.subarray(offset, fzero), encoding);\n                    offset = fzero + nullTerminatorLength;\n                    pic.data = uint8Array.subarray(offset, length);\n                    output = pic;\n                }\n                break;\n            case 'CNT':\n            case 'PCNT':\n                output = decodeUintBE(uint8Array);\n                break;\n            case 'SYLT': {\n                const syltHeader = SyncTextHeader.get(uint8Array, 0);\n                offset += SyncTextHeader.len;\n                const result = {\n                    descriptor: '',\n                    language: syltHeader.language,\n                    contentType: syltHeader.contentType,\n                    timeStampFormat: syltHeader.timeStampFormat,\n                    syncText: []\n                };\n                let readSyllables = false;\n                while (offset < length) {\n                    const nullStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), syltHeader.encoding);\n                    offset += nullStr.len;\n                    if (readSyllables) {\n                        const timestamp = Token.UINT32_BE.get(uint8Array, offset);\n                        offset += Token.UINT32_BE.len;\n                        result.syncText.push({\n                            text: nullStr.text,\n                            timestamp\n                        });\n                    }\n                    else {\n                        result.descriptor = nullStr.text;\n                        readSyllables = true;\n                    }\n                }\n                output = result;\n                break;\n            }\n            case 'ULT':\n            case 'USLT':\n            case 'COM':\n            case 'COMM': {\n                const textHeader = TextHeader.get(uint8Array, offset);\n                offset += TextHeader.len;\n                const descriptorStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), textHeader.encoding);\n                offset += descriptorStr.len;\n                const textStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), textHeader.encoding);\n                const comment = {\n                    language: textHeader.language,\n                    descriptor: descriptorStr.text,\n                    text: textStr.text\n                };\n                output = comment;\n                break;\n            }\n            case 'UFID': {\n                const ufid = FrameParser.readIdentifierAndData(uint8Array, offset, length, defaultEnc);\n                output = { owner_identifier: ufid.id, identifier: ufid.data };\n                break;\n            }\n            case 'PRIV': { // private frame\n                const priv = FrameParser.readIdentifierAndData(uint8Array, offset, length, defaultEnc);\n                output = { owner_identifier: priv.id, data: priv.data };\n                break;\n            }\n            case 'POPM': { // Popularimeter\n                fzero = util.findZero(uint8Array, offset, length, defaultEnc);\n                const email = util.decodeString(uint8Array.subarray(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                const valueLen = length - offset - 1;\n                output = {\n                    email,\n                    rating: Token.UINT8.get(uint8Array, offset),\n                    counter: valueLen > 0 ? util.decodeUintBE(uint8Array.subarray(offset + 1)) : undefined\n                };\n                break;\n            }\n            case 'GEOB': { // General encapsulated object\n                fzero = util.findZero(uint8Array, offset + 1, length, encoding);\n                const mimeType = util.decodeString(uint8Array.subarray(offset + 1, fzero), defaultEnc);\n                offset = fzero + 1;\n                fzero = util.findZero(uint8Array, offset, length, encoding);\n                const filename = util.decodeString(uint8Array.subarray(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                fzero = util.findZero(uint8Array, offset, length, encoding);\n                const description = util.decodeString(uint8Array.subarray(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                const geob = {\n                    type: mimeType,\n                    filename,\n                    description,\n                    data: uint8Array.subarray(offset, length)\n                };\n                output = geob;\n                break;\n            }\n            // W-Frames:\n            case 'WCOM':\n            case 'WCOP':\n            case 'WOAF':\n            case 'WOAR':\n            case 'WOAS':\n            case 'WORS':\n            case 'WPAY':\n            case 'WPUB':\n                // Decode URL\n                fzero = util.findZero(uint8Array, offset + 1, length, encoding);\n                output = util.decodeString(uint8Array.subarray(offset, fzero), defaultEnc);\n                break;\n            case 'WXXX': {\n                // Decode URL\n                fzero = util.findZero(uint8Array, offset + 1, length, encoding);\n                const description = util.decodeString(uint8Array.subarray(offset + 1, fzero), encoding);\n                offset = fzero + (encoding === 'utf-16le' ? 2 : 1);\n                output = { description, url: util.decodeString(uint8Array.subarray(offset, length), defaultEnc) };\n                break;\n            }\n            case 'WFD':\n            case 'WFED':\n                output = util.decodeString(uint8Array.subarray(offset + 1, util.findZero(uint8Array, offset + 1, length, encoding)), encoding);\n                break;\n            case 'MCDI': {\n                // Music CD identifier\n                output = uint8Array.subarray(0, length);\n                break;\n            }\n            default:\n                debug(`Warning: unsupported id3v2-tag-type: ${type}`);\n                break;\n        }\n        return output;\n    }\n    static readNullTerminatedString(uint8Array, encoding) {\n        let offset = encoding.bom ? 2 : 0;\n        const zeroIndex = util.findZero(uint8Array, offset, uint8Array.length, encoding.encoding);\n        const txt = uint8Array.subarray(offset, zeroIndex);\n        if (encoding.encoding === 'utf-16le') {\n            offset = zeroIndex + 2;\n        }\n        else {\n            offset = zeroIndex + 1;\n        }\n        return {\n            text: util.decodeString(txt, encoding.encoding),\n            len: offset\n        };\n    }\n    static fixPictureMimeType(pictureType) {\n        pictureType = pictureType.toLocaleLowerCase();\n        switch (pictureType) {\n            case 'jpg':\n                return 'image/jpeg';\n            case 'png':\n                return 'image/png';\n        }\n        return pictureType;\n    }\n    /**\n     * Converts TMCL (Musician credits list) or TIPL (Involved people list)\n     * @param entries\n     */\n    static functionList(entries) {\n        const res = {};\n        for (let i = 0; i + 1 < entries.length; i += 2) {\n            const names = entries[i + 1].split(',');\n            res[entries[i]] = res[entries[i]] ? res[entries[i]].concat(names) : names;\n        }\n        return res;\n    }\n    /**\n     * id3v2.4 defines that multiple T* values are separated by 0x00\n     * id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\n     * @param tag - Tag name\n     * @param text - Concatenated tag value\n     * @returns Split tag value\n     */\n    splitValue(tag, text) {\n        let values;\n        if (this.major < 4) {\n            values = text.split(/\\x00/g);\n            if (values.length > 1) {\n                this.warningCollector.addWarning(`ID3v2.${this.major} ${tag} uses non standard null-separator.`);\n            }\n            else {\n                values = text.split(/\\//g);\n            }\n        }\n        else {\n            values = text.split(/\\x00/g);\n        }\n        return FrameParser.trimArray(values);\n    }\n    static trimArray(values) {\n        return values.map(value => value.replace(/\\x00+$/, '').trim());\n    }\n    static readIdentifierAndData(uint8Array, offset, length, encoding) {\n        const fzero = util.findZero(uint8Array, offset, length, encoding);\n        const id = util.decodeString(uint8Array.subarray(offset, fzero), encoding);\n        offset = fzero + FrameParser.getNullTerminatorLength(encoding);\n        return { id, data: uint8Array.subarray(offset, length) };\n    }\n    static getNullTerminatorLength(enc) {\n        return enc === 'utf-16le' ? 2 : 1;\n    }\n}\nexport class Id3v2ContentError extends makeUnexpectedFileContentError('id3v2') {\n}\nfunction makeUnexpectedMajorVersionError(majorVer) {\n    throw new Id3v2ContentError(`Unexpected majorVer: ${majorVer}`);\n}\n","import * as Token from 'token-types';\nimport * as util from '../common/Util.js';\nimport { FrameParser, Id3v2ContentError } from './FrameParser.js';\nimport { ExtendedHeader, ID3v2Header, UINT32SYNCSAFE } from './ID3v2Token.js';\nimport { textDecode } from '@borewit/text-codec';\nexport class ID3v2Parser {\n    constructor() {\n        this.tokenizer = undefined;\n        this.id3Header = undefined;\n        this.metadata = undefined;\n        this.headerType = undefined;\n        this.options = undefined;\n    }\n    static removeUnsyncBytes(buffer) {\n        let readI = 0;\n        let writeI = 0;\n        while (readI < buffer.length - 1) {\n            if (readI !== writeI) {\n                buffer[writeI] = buffer[readI];\n            }\n            readI += (buffer[readI] === 0xFF && buffer[readI + 1] === 0) ? 2 : 1;\n            writeI++;\n        }\n        if (readI < buffer.length) {\n            buffer[writeI++] = buffer[readI];\n        }\n        return buffer.subarray(0, writeI);\n    }\n    static getFrameHeaderLength(majorVer) {\n        switch (majorVer) {\n            case 2:\n                return 6;\n            case 3:\n            case 4:\n                return 10;\n            default:\n                throw makeUnexpectedMajorVersionError(majorVer);\n        }\n    }\n    static readFrameFlags(b) {\n        return {\n            status: {\n                tag_alter_preservation: util.getBit(b, 0, 6),\n                file_alter_preservation: util.getBit(b, 0, 5),\n                read_only: util.getBit(b, 0, 4)\n            },\n            format: {\n                grouping_identity: util.getBit(b, 1, 7),\n                compression: util.getBit(b, 1, 3),\n                encryption: util.getBit(b, 1, 2),\n                unsynchronisation: util.getBit(b, 1, 1),\n                data_length_indicator: util.getBit(b, 1, 0)\n            }\n        };\n    }\n    static readFrameData(uint8Array, frameHeader, majorVer, includeCovers, warningCollector) {\n        const frameParser = new FrameParser(majorVer, warningCollector);\n        switch (majorVer) {\n            case 2:\n                return frameParser.readData(uint8Array, frameHeader.id, includeCovers);\n            case 3:\n            case 4:\n                if (frameHeader.flags?.format.unsynchronisation) {\n                    uint8Array = ID3v2Parser.removeUnsyncBytes(uint8Array);\n                }\n                if (frameHeader.flags?.format.data_length_indicator) {\n                    uint8Array = uint8Array.subarray(4, uint8Array.length);\n                }\n                return frameParser.readData(uint8Array, frameHeader.id, includeCovers);\n            default:\n                throw makeUnexpectedMajorVersionError(majorVer);\n        }\n    }\n    /**\n     * Create a combined tag key, of tag & description\n     * @param tag e.g.: COM\n     * @param description e.g. iTunPGAP\n     * @returns string e.g. COM:iTunPGAP\n     */\n    static makeDescriptionTagName(tag, description) {\n        return tag + (description ? `:${description}` : '');\n    }\n    async parse(metadata, tokenizer, options) {\n        this.tokenizer = tokenizer;\n        this.metadata = metadata;\n        this.options = options;\n        const id3Header = await this.tokenizer.readToken(ID3v2Header);\n        if (id3Header.fileIdentifier !== 'ID3') {\n            throw new Id3v2ContentError('expected ID3-header file-identifier \\'ID3\\' was not found');\n        }\n        this.id3Header = id3Header;\n        this.headerType = (`ID3v2.${id3Header.version.major}`);\n        return id3Header.flags.isExtendedHeader ? this.parseExtendedHeader() : this.parseId3Data(id3Header.size);\n    }\n    async parseExtendedHeader() {\n        const extendedHeader = await this.tokenizer.readToken(ExtendedHeader);\n        const dataRemaining = extendedHeader.size - ExtendedHeader.len;\n        return dataRemaining > 0 ? this.parseExtendedHeaderData(dataRemaining, extendedHeader.size) : this.parseId3Data(this.id3Header.size - extendedHeader.size);\n    }\n    async parseExtendedHeaderData(dataRemaining, extendedHeaderSize) {\n        await this.tokenizer.ignore(dataRemaining);\n        return this.parseId3Data(this.id3Header.size - extendedHeaderSize);\n    }\n    async parseId3Data(dataLen) {\n        const uint8Array = await this.tokenizer.readToken(new Token.Uint8ArrayType(dataLen));\n        for (const tag of this.parseMetadata(uint8Array)) {\n            switch (tag.id) {\n                case 'TXXX':\n                    if (tag.value) {\n                        await this.handleTag(tag, tag.value.text, () => tag.value.description);\n                    }\n                    break;\n                default:\n                    await (Array.isArray(tag.value) ? Promise.all(tag.value.map(value => this.addTag(tag.id, value))) : this.addTag(tag.id, tag.value));\n            }\n        }\n    }\n    async handleTag(tag, values, descriptor, resolveValue = value => value) {\n        await Promise.all(values.map(value => this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, descriptor(value)), resolveValue(value))));\n    }\n    async addTag(id, value) {\n        await this.metadata.addTag(this.headerType, id, value);\n    }\n    parseMetadata(data) {\n        let offset = 0;\n        const tags = [];\n        while (true) {\n            if (offset === data.length)\n                break;\n            const frameHeaderLength = ID3v2Parser.getFrameHeaderLength(this.id3Header.version.major);\n            if (offset + frameHeaderLength > data.length) {\n                this.metadata.addWarning('Illegal ID3v2 tag length');\n                break;\n            }\n            const frameHeaderBytes = data.subarray(offset, offset + frameHeaderLength);\n            offset += frameHeaderLength;\n            const frameHeader = this.readFrameHeader(frameHeaderBytes, this.id3Header.version.major);\n            const frameDataBytes = data.subarray(offset, offset + frameHeader.length);\n            offset += frameHeader.length;\n            const values = ID3v2Parser.readFrameData(frameDataBytes, frameHeader, this.id3Header.version.major, !this.options.skipCovers, this.metadata);\n            if (values) {\n                tags.push({ id: frameHeader.id, value: values });\n            }\n        }\n        return tags;\n    }\n    readFrameHeader(uint8Array, majorVer) {\n        let header;\n        switch (majorVer) {\n            case 2:\n                header = {\n                    id: textDecode(uint8Array.subarray(0, 3), 'ascii'),\n                    length: Token.UINT24_BE.get(uint8Array, 3)\n                };\n                if (!header.id.match(/[A-Z0-9]{3}/g)) {\n                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\n                }\n                break;\n            case 3:\n            case 4:\n                header = {\n                    id: textDecode(uint8Array.subarray(0, 4), 'ascii'),\n                    length: (majorVer === 4 ? UINT32SYNCSAFE : Token.UINT32_BE).get(uint8Array, 4),\n                    flags: ID3v2Parser.readFrameFlags(uint8Array.subarray(8, 10))\n                };\n                if (!header.id.match(/[A-Z0-9]{4}/g)) {\n                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\n                }\n                break;\n            default:\n                throw makeUnexpectedMajorVersionError(majorVer);\n        }\n        return header;\n    }\n}\nfunction makeUnexpectedMajorVersionError(majorVer) {\n    throw new Id3v2ContentError(`Unexpected majorVer: ${majorVer}`);\n}\n"],"names":["debug","initDebug","defaultEnc","parseGenre","origVal","genres","code","word","c","genre","parseGenreCode","Genres","FrameParser","major","warningCollector","uint8Array","type","includeCovers","encoding","bom","TextEncodingToken","length","offset","output","nullTerminatorLength","fzero","text","util.decodeString","error","v","acc","val","idAndData","pic","util.findZero","makeUnexpectedMajorVersionError","AttachedPictureType","decodeUintBE","syltHeader","SyncTextHeader","result","readSyllables","nullStr","timestamp","Token.UINT32_BE","textHeader","TextHeader","descriptorStr","textStr","ufid","priv","email","valueLen","Token.UINT8","util.decodeUintBE","mimeType","filename","description","zeroIndex","txt","pictureType","entries","res","i","names","tag","values","value","id","enc","Id3v2ContentError","makeUnexpectedFileContentError","majorVer","ID3v2Parser","buffer","readI","writeI","b","util.getBit","frameHeader","frameParser","metadata","tokenizer","options","id3Header","ID3v2Header","extendedHeader","ExtendedHeader","dataRemaining","extendedHeaderSize","dataLen","Token.Uint8ArrayType","descriptor","resolveValue","data","tags","frameHeaderLength","frameHeaderBytes","frameDataBytes","header","textDecode","Token.UINT24_BE","UINT32SYNCSAFE"],"mappings":"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","x_google_ignoreList":[0,1]}